package com.bootcamp.BankCoin.controller;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bootcamp.BankCoin.model.BankTasa;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@Slf4j
@RestController
@RequestMapping("/bankTasa")
public class BankTasaController {

	@PostMapping
	public Mono<BankTasa> createBankTasa(@RequestBody BankTasa bankTasa) {
 

			try {

				var typeCostumer = this.customerTypeSerivce.getCustomerTypebyId(customerType.getId());

				List<CustomerType> list1 = new ArrayList<>();

				typeCostumer.flux().collectList().subscribe(list1::addAll);

				long temporizador = (3 * 1000);
				Thread.sleep(temporizador);

				log.info("Obtener valor para validar Id --->" + list1);

				codigoValidator = this.validardor(list1);

				if (codigoValidator != 0 && codigoValidator.equals(customerType.getId())) {
					return Mono.error(new ResponseStatusException(HttpStatus.PRECONDITION_FAILED,
							"El Id de Tipo Cliente ya existe"));
				} else {
					return this.customerTypeSerivce.createCustomerType(customerType);
				}

			} catch (InterruptedException e) {
				log.info(e.toString());
				Thread.currentThread().interrupt();
				return Mono.error(new ResponseStatusException(HttpStatus.CONFLICT, e.getMessage()));
			}
 

	}
}
